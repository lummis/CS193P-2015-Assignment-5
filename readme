This is Assignment V: "Animation" in Stanford online course CS193P, 2015, "Developing iOS 8 Apps with Swift". All of the required tasks are implemented except I decided not to have a paddle ("creativity is encouraged and will be rewarded"). I'm putting the project on github just in case it helps somebody to see a completed implementation. That would have helped me.

The "ball" has to hit each brick 3 times to make it disappear. When the game starts the bricks are attached to anchors near the top of the screen. The first hit changes a brick's color and may impart rotation on it so it spins on its anchor. The second hit disconnects it from its anchor then it falls to the bottom due to gravity. A brick that is resting on the bottom (but not on top of another brick) change color again to a third color. If the ball hits a brick at the bottom after it has changed to the third color it (the brick) vanishes.

As he said, the ball sometimes gets outside the gameView and is "lost". When this happens click anywhere within the gameView and a new ball is put at that location.

Changing to the settings tab and then back without changing any of the settings doesn't start the game over. But if any setting is changed the game starts over with the new settings. All 4 of the controls he asks for are included and their values are persisted in userDefaults.

I added a timer as a type of score (extra credit). An alert pops up when the last brick is removed. Since there is no paddle there is no need for a pan gesture. A tap gesture pushes the ball in a particular direction (away from the tap position) instead of a random direction. The game looks and works the same on iPhone and iPad.

This implementation took me a very long time (almost 3 weeks at a couple of hours per day). I was totally stuck and made no progress at all on some days. I thought about including more "extra credit" projects but by the time the required tasks were done I was tired of spending so much time on such a lame game. It's really not a good enough game to be worth so much time. I tried to find a way to make the ball be shaped according to a bezier path but couldn't do it. I was thinking of making it look like a football. That might not be possible. It can be masked so it has the shape of a path but the dynamic behavior (so far as I can tell) will still be determined by the underlying UIView, which is necessarily rectangular That means collisions won't happen exactly on the path but on the edges of the view even if part of the view is masked. So it will bounce like a square and not like a football. I learned a lot from doing this but I don't want to work on it any longer.